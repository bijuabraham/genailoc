/**
 * detector.ts
 * 
 * This file contains the logic for detecting AI-generated code in VS Code.
 * It monitors text document change events and uses heuristics based on:
 * - The number of lines added in a single change
 * - The number of characters added in a single change
 * - The timing between large insertions
 * - The presence of specific AI coding extensions
 * 
 * The detector supports multiple AI coding assistants including GitHub Copilot,
 * Cline/Claude, Codeium, Tabnine, and Aider.
 */

import * as vscode from 'vscode';

// Track the last time a large chunk of text was inserted
// This is used for timing-based detection heuristics
let lastLargeInsertTime = 0;

// Map extension IDs to their common names for reporting
// This allows for consistent naming in logs and UI regardless of the actual extension ID
const extensionNameMap: Record<string, string> = {
    'GitHub.copilot': 'copilot',
    'Codeium.codeium': 'codeium',
    'tabnine.tabnine-vscode': 'tabnine',
    'aider.edge-ai': 'aider',
    'anthropic.claude': 'cline', // Report Claude as Cline
    'anthropic.cline': 'cline'
};

/**
 * Detection thresholds for different AI coding assistants
 * 
 * Each AI tool has unique patterns in how it inserts code, which we can use for detection:
 * - LARGE_INSERT_THRESHOLD: Minimum number of lines added to consider it a "large insertion"
 * - CHARACTER_INSERT_THRESHOLD: Minimum number of characters added to consider it a "large insertion"
 * - TIMING_THRESHOLD: Maximum time (in ms) between related insertions to consider them connected
 * 
 * These thresholds are based on observed behavior and may need adjustment over time
 * as the AI tools evolve or as we gather more user data.
 */

// GitHub Copilot detection thresholds
const COPILOT_LARGE_INSERT_THRESHOLD = 1; // Lines
const COPILOT_CHARACTER_INSERT_THRESHOLD = 50; // Characters
const COPILOT_TIMING_THRESHOLD = 6000; // ms

// Cline/Claude detection thresholds
const CLINE_LARGE_INSERT_THRESHOLD = 2; // Lines
const CLINE_CHARACTER_INSERT_THRESHOLD = 80; // Characters
const CLINE_TIMING_THRESHOLD = 6000; // ms

// Codeium detection thresholds
const CODEIUM_LARGE_INSERT_THRESHOLD = 12; // Lines
const CODEIUM_CHARACTER_INSERT_THRESHOLD = 120; // Characters
const CODEIUM_TIMING_THRESHOLD = 1200; // ms

// Tabnine detection thresholds
const TABNINE_LARGE_INSERT_THRESHOLD = 8; // Lines
const TABNINE_CHARACTER_INSERT_THRESHOLD = 80; // Characters
const TABNINE_TIMING_THRESHOLD = 800; // ms

// Aider detection thresholds
const AIDER_LARGE_INSERT_THRESHOLD = 3; // Lines
const AIDER_CHARACTER_INSERT_THRESHOLD = 150; // Characters
const AIDER_TIMING_THRESHOLD = 6000; // ms


/**
 * This is a test function
 * Calculate total lines and characters added in a text document change event
 * Also calculates timing information relative to last large insert and extracts the reason
 * 
 * This function processes VS Code's TextDocumentChangeEvent to extract metrics
 * that are used by the detection algorithms to identify AI-generated code.
 * 
 * @param event - The VS Code text document change event to analyze
 * @returns Object containing calculated metrics about the change
 */
export function calculateChanges(event: vscode.TextDocumentChangeEvent): { 
    totalLinesAdded: number, 
    totalCharsAdded: number,
    timingSinceLastInsert: number,
    reason: number
} {
    let totalLinesAdded = 0;
    let totalCharsAdded = 0;
    
    event.contentChanges.forEach(change => {
        const newLineCount = (change.text.match(/\n/g) || []).length;
        totalLinesAdded += newLineCount;
        totalCharsAdded += change.text.length;
    });
    
    // Calculate timing information
    const timingSinceLastInsert = Date.now() - lastLargeInsertTime;
    
    // Extract the reason from the event
    const reason = event.reason !== undefined ? event.reason : 1; // Default to 1 (Edits) if undefined
    
    return { 
        totalLinesAdded, 
        totalCharsAdded,
        timingSinceLastInsert,
        reason
    };
}

/**
 * Detect if code was generated by GitHub Copilot
 * 
 * This function applies GitHub Copilot-specific heuristics to determine if
 * a text change was likely generated by Copilot. It checks:
 * 1. If the Copilot extension is active
 * 2. If the change exceeds Copilot's typical insertion thresholds
 * 3. If the change timing matches Copilot's behavior pattern
 * 
 * @param event - The VS Code text document change event to analyze
 * @param activeExtensions - List of active extension IDs
 * @returns boolean indicating whether the change was likely from Copilot
 */
function detectCopilot(event: vscode.TextDocumentChangeEvent, activeExtensions: string[]): boolean {
    if (!activeExtensions.includes('GitHub.copilot')) {
        return false;
    }
    
    const { totalLinesAdded, totalCharsAdded } = calculateChanges(event);
    
    // Check if this is a large insertion (exceeds either threshold)
    const isLargeInsertion = totalLinesAdded > COPILOT_LARGE_INSERT_THRESHOLD || 
                             totalCharsAdded > COPILOT_CHARACTER_INSERT_THRESHOLD;
    
    // Check if this change happened shortly after a previous large insertion
    const isTimingRelated = Date.now() - lastLargeInsertTime < COPILOT_TIMING_THRESHOLD;
    
    // If this is a large insertion, update the timestamp
    if (isLargeInsertion) {
        lastLargeInsertTime = Date.now();
    }
    
    return isLargeInsertion || isTimingRelated;
}

/**
 * Detect if code was generated by Cline/Claude
 * 
 * This function applies Cline/Claude-specific heuristics to determine if
 * a text change was likely generated by Cline or Claude. It checks:
 * 1. If either the Cline or Claude extension is active
 * 2. If the change exceeds Cline/Claude's typical insertion thresholds
 * 3. If the change timing matches Cline/Claude's behavior pattern
 * 
 * @param event - The VS Code text document change event to analyze
 * @param activeExtensions - List of active extension IDs
 * @returns boolean indicating whether the change was likely from Cline/Claude
 */
function detectCline(event: vscode.TextDocumentChangeEvent, activeExtensions: string[]): boolean {
    if (!activeExtensions.includes('anthropic.cline') && !activeExtensions.includes('anthropic.claude')) {
        return false;
    }
    
    
    const { totalLinesAdded, totalCharsAdded } = calculateChanges(event);
    
    // Check if this is a large insertion (exceeds either threshold)
    const isLargeInsertion = totalLinesAdded > CLINE_LARGE_INSERT_THRESHOLD || 
                             totalCharsAdded > CLINE_CHARACTER_INSERT_THRESHOLD;
    
    // Check if this change happened shortly after a previous large insertion
    const isTimingRelated = Date.now() - lastLargeInsertTime < CLINE_TIMING_THRESHOLD;
    
    // If this is a large insertion, update the timestamp
    if (isLargeInsertion) {
        lastLargeInsertTime = Date.now();
    }
    
    return isLargeInsertion || isTimingRelated;
}

/**
 * Detect if code was generated by Codeium
 * 
 * This function applies Codeium-specific heuristics to determine if
 * a text change was likely generated by Codeium. It checks:
 * 1. If the Codeium extension is active
 * 2. If the change exceeds Codeium's typical insertion thresholds
 * 3. If the change timing matches Codeium's behavior pattern
 * 
 * @param event - The VS Code text document change event to analyze
 * @param activeExtensions - List of active extension IDs
 * @returns boolean indicating whether the change was likely from Codeium
 */
function detectCodeium(event: vscode.TextDocumentChangeEvent, activeExtensions: string[]): boolean {
    if (!activeExtensions.includes('Codeium.codeium')) {
        return false;
    }
    
    const { totalLinesAdded, totalCharsAdded } = calculateChanges(event);
    
    // Check if this is a large insertion (exceeds either threshold)
    const isLargeInsertion = totalLinesAdded > CODEIUM_LARGE_INSERT_THRESHOLD || 
                             totalCharsAdded > CODEIUM_CHARACTER_INSERT_THRESHOLD;
    
    // Check if this change happened shortly after a previous large insertion
    const isTimingRelated = Date.now() - lastLargeInsertTime < CODEIUM_TIMING_THRESHOLD;
    
    // If this is a large insertion, update the timestamp
    if (isLargeInsertion) {
        lastLargeInsertTime = Date.now();
    }
    
    return isLargeInsertion || isTimingRelated;
}

/**
 * Detect if code was generated by Tabnine
 * 
 * This function applies Tabnine-specific heuristics to determine if
 * a text change was likely generated by Tabnine. It checks:
 * 1. If the Tabnine extension is active
 * 2. If the change exceeds Tabnine's typical insertion thresholds
 * 3. If the change timing matches Tabnine's behavior pattern
 * 
 * @param event - The VS Code text document change event to analyze
 * @param activeExtensions - List of active extension IDs
 * @returns boolean indicating whether the change was likely from Tabnine
 */
function detectTabnine(event: vscode.TextDocumentChangeEvent, activeExtensions: string[]): boolean {
    if (!activeExtensions.includes('tabnine.tabnine-vscode')) {
        return false;
    }
    
    const { totalLinesAdded, totalCharsAdded } = calculateChanges(event);
    
    // Check if this is a large insertion (exceeds either threshold)
    const isLargeInsertion = totalLinesAdded > TABNINE_LARGE_INSERT_THRESHOLD || 
                             totalCharsAdded > TABNINE_CHARACTER_INSERT_THRESHOLD;
    
    // Check if this change happened shortly after a previous large insertion
    const isTimingRelated = Date.now() - lastLargeInsertTime < TABNINE_TIMING_THRESHOLD;
    
    // If this is a large insertion, update the timestamp
    if (isLargeInsertion) {
        lastLargeInsertTime = Date.now();
    }
    
    return isLargeInsertion || isTimingRelated;
}

/**
 * Detect if code was generated by Aider
 * 
 * This function applies Aider-specific heuristics to determine if
 * a text change was likely generated by Aider. It checks:
 * 1. If the Aider extension is active
 * 2. If the change exceeds Aider's typical insertion thresholds
 * 3. If the change timing matches Aider's behavior pattern
 * 
 * @param event - The VS Code text document change event to analyze
 * @param activeExtensions - List of active extension IDs
 * @returns boolean indicating whether the change was likely from Aider
 */
function detectAider(event: vscode.TextDocumentChangeEvent, activeExtensions: string[]): boolean {
    if (!activeExtensions.includes('aider.edge-ai')) {
        return false;
    }
    
    const { totalLinesAdded, totalCharsAdded } = calculateChanges(event);
    
    // Check if this is a large insertion (exceeds either threshold)
    const isLargeInsertion = totalLinesAdded > AIDER_LARGE_INSERT_THRESHOLD || 
                             totalCharsAdded > AIDER_CHARACTER_INSERT_THRESHOLD;
    
    // Check if this change happened shortly after a previous large insertion
    const isTimingRelated = Date.now() - lastLargeInsertTime < AIDER_TIMING_THRESHOLD;
    
    // If this is a large insertion, update the timestamp
    if (isLargeInsertion) {
        lastLargeInsertTime = Date.now();
    }
    
    return isLargeInsertion || isTimingRelated;
}


/**
 * Interface for threshold values and actual detected values
 * 
 * This interface defines the structure for both:
 * - The threshold values used to detect AI-generated code
 * - The actual values detected in a specific change event
 * 
 * This allows for easy comparison between thresholds and actual values,
 * which is useful for debugging and explaining detection results.
 */
export interface ThresholdValues {
    // Threshold values
    linesThreshold: number;
    charactersThreshold: number;
    timingThreshold: number;
    
    // Actual detected values
    actualLinesAdded?: number;
    actualCharsAdded?: number;
    actualTimingSinceLastInsert?: number;
    reason?: number;
}

/**
 * Get threshold values and actual detected values for a specific source
 * 
 * This function returns both the threshold values for a given AI source
 * and the actual values detected in the provided change event. This is
 * useful for:
 * - Debugging detection issues
 * - Providing detailed information about why a change was classified as AI-generated
 * - Tuning threshold values based on real-world data
 * 
 * @param source - The name of the AI source (e.g., 'cline', 'github copilot')
 * @param event - The VS Code text document change event to analyze
 * @returns ThresholdValues object containing both threshold and actual values
 */
export function getThresholdValues(source: string, event: vscode.TextDocumentChangeEvent): ThresholdValues {
    // Calculate actual values
    const { totalLinesAdded, totalCharsAdded, timingSinceLastInsert, reason } = calculateChanges(event);
    
    // Base object with actual values
    const baseValues = {
        actualLinesAdded: totalLinesAdded,
        actualCharsAdded: totalCharsAdded,
        actualTimingSinceLastInsert: timingSinceLastInsert,
        reason: reason
    };
    
    switch (source) {
        case 'cline':
            return {
                ...baseValues,
                linesThreshold: CLINE_LARGE_INSERT_THRESHOLD,
                charactersThreshold: CLINE_CHARACTER_INSERT_THRESHOLD,
                timingThreshold: CLINE_TIMING_THRESHOLD
            };
        case 'github copilot':
            return {
                ...baseValues,
                linesThreshold: COPILOT_LARGE_INSERT_THRESHOLD,
                charactersThreshold: COPILOT_CHARACTER_INSERT_THRESHOLD,
                timingThreshold: COPILOT_TIMING_THRESHOLD
            };
        case 'codeium':
            return {
                ...baseValues,
                linesThreshold: CODEIUM_LARGE_INSERT_THRESHOLD,
                charactersThreshold: CODEIUM_CHARACTER_INSERT_THRESHOLD,
                timingThreshold: CODEIUM_TIMING_THRESHOLD
            };
        case 'tabnine':
            return {
                ...baseValues,
                linesThreshold: TABNINE_LARGE_INSERT_THRESHOLD,
                charactersThreshold: TABNINE_CHARACTER_INSERT_THRESHOLD,
                timingThreshold: TABNINE_TIMING_THRESHOLD
            };
        case 'aider':
            return {
                ...baseValues,
                linesThreshold: AIDER_LARGE_INSERT_THRESHOLD,
                charactersThreshold: AIDER_CHARACTER_INSERT_THRESHOLD,
                timingThreshold: AIDER_TIMING_THRESHOLD
            };
        default:
            return {
                ...baseValues,
                linesThreshold: 0,
                charactersThreshold: 0,
                timingThreshold: 0
            };
    }
}

/**
 * Main function to detect the source of code changes
 * 
 * This is the primary entry point for detection. It:
 * 1. Checks which AI coding extensions are active
 * 2. Applies each detector in order of priority
 * 3. Returns the detected source or 'handwritten' if no AI source is detected
 * 
 * The order of detection is important as some AI tools may have overlapping
 * detection patterns. The current priority order is:
 * 1. Cline/Claude
 * 2. GitHub Copilot
 * 3. Codeium
 * 4. Tabnine
 * 5. Aider
 * 
 * @param event - The VS Code text document change event to analyze
 * @returns string indicating the detected source of the code change
 */
export function detectSource(event: vscode.TextDocumentChangeEvent): string {
    // Check if any of the known AI extensions are active
    const activeExtensions = vscode.extensions.all.map(ext => ext.id);
    
    // Check for each AI tool in order of priority
    if (detectCline(event, activeExtensions)) {
        return 'GenAI';
    }
    
    if (detectCopilot(event, activeExtensions)) {
        return 'GenAI';
    }
    
    if (detectCodeium(event, activeExtensions)) {
        return 'GenAI';
    }
    
    if (detectTabnine(event, activeExtensions)) {
        return 'GenAI';
    }
    
    if (detectAider(event, activeExtensions)) {
        return 'GenAI';
    }
    
    // If we can't determine an AI source, assume it's handwritten
    return 'handwritten';
}
